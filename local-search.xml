<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Vue初步学习</title>
    <link href="/posts/52419/"/>
    <url>/posts/52419/</url>
    
    <content type="html"><![CDATA[<h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><p>创建项目：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm create vue@latest<br></code></pre></td></tr></table></figure><p>安装依赖并启动服务：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm install<br>npm run dev<br></code></pre></td></tr></table></figure><p>项目打包：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm run build<br></code></pre></td></tr></table></figure><h1 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h1><ul><li><p><code>package.json</code>：该文件包含项目的依赖项列表，以及一些元数据和 <code>eslint</code> 配置。</p></li><li><p><code>yarn.lock</code>：如果你选择 <code>yarn</code> 作为你的包管理器，将生成此文件，其中包含项目所需的所有依赖项和子依赖项的列表。</p></li><li><p><code>babel.config.js</code>：这个是 <a href="https://babeljs.io/">Babel</a> 的配置文件，可以在开发中使用 JavaScript 的新特性，并且将其转换为在生产环境中可以跨浏览器运行的旧语法代码。你也可以在这个里配置额外的 babel 插件。</p></li><li><p><code>jsconfig.json</code>：这是一份用于 <a href="https://code.visualstudio.com/docs/languages/jsconfig">Visual Studio Code</a> 的配置文件，它为 VS Code 提供了关于项目结构的上下文信息，并帮助自动完成。</p></li><li><p><code>public</code>：这个目录包含一些在Webpack编译过程中没有加工处理过的文件（有一个例外：index.html 会有一些处理）。</p><ul><li><code>favicon.ico</code>：这个是项目的图标，当前就是一个 Vue 的 logo。</li></ul></li><li><p><code>index.html</code>：首页入口</p></li><li><p><code>src</code>：这个是 Vue 应用的核心代码目录</p><ul><li><code>main.js</code>：这是应用的入口文件。目前它会初始化 Vue 应用并且制定将应用挂载到 <code>index.html</code> 文件中的哪个 HTML 元素上。通常还会做一些注册全局组件或者添额外的 Vue 库的操作。</li><li><code>App.vue</code>：这是 Vue 应用的根节点组件。可以直接写组件而不用components</li><li><code>components</code>：这是用来存放自定义组件的目录。</li><li><code>assets</code>：这个目录用来存放像 CSS、图片这种静态资源，但是因为它们属于代码目录下，所以可以用 webpack 来操作和处理。意思就是你可以使用一些预处理比如 <a href="https://sass-lang.com/">Sass&#x2F;SCSS</a> 或者 <a href="https://stylus-lang.com/">Stylus</a>。</li></ul></li><li><p><code>static</code>： 静态资源目录</p></li><li><p><code>dist</code>： 使用<code>npm run bulid </code>打包后生成的。</p></li></ul><hr><p>参考资料：</p><ol><li><a href="https://developer.mozilla.org/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_getting_started">开始使用 Vue</a></li><li><a href="https://www.runoob.com/vue3/vue3-tutorial.html">Vue3 教程 | 菜鸟教程</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript</title>
    <link href="/posts/18006/"/>
    <url>/posts/18006/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><p>客户端 JavaScript 语言的核心包含一些普遍的编程特性，以让你可以做到如下的事情：</p><ul><li>在变量中储存有用的值。比如上文的示例中，我们请求客户输入一个新名字，然后将其储存到 <code>name</code> 变量中。</li><li>操作一段文本（在编程中称为“字符串”（string））。上文的示例中，我们取字符串“玩家 1：”，然后把它和 <code>name</code> 变量拼接起来，创造出完整的文本标签，比如“玩家 1：小明”。</li><li>运行代码以响应网页中发生的特定事件。上文的示例中，我们用一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/click_event"><code>click</code></a> 事件来检测按钮什么时候被点击，然后运行代码更新文本标签。</li><li>以及更多！</li></ul><h2 id="浏览器API"><a href="#浏览器API" class="headerlink" title="浏览器API"></a>浏览器API</h2><p>​<strong>浏览器 API</strong> 内建于 web 浏览器中，它们可以将数据从周边计算机环境中筛选出来，还可以做实用的复杂工作。例如：</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model">文档对象模型 API</a> 能通过创建、移除和修改 HTML，为页面动态应用新样式等手段来操作 HTML 和 CSS。比如当某个页面出现了一个弹窗，或者显示了一些新内容（像上文小演示中看到那样），这就是 DOM 在运行。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Geolocation">地理位置 API</a> 获取地理信息。这就是为什么<a href="https://www.google.com/maps">谷歌地图</a>可以找到你的位置，而且标示在地图上。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API">画布（Canvas）</a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebGL_API">WebGL</a> API 可以创建生动的 2D 和 3D 图像。人们正运用这些 web 技术制作令人惊叹的作品。参见 <a href="https://experiments.withgoogle.com/collection/chrome">Chrome Experiments</a> 以及 <a href="https://webglsamples.org/">webglsamples</a>。</li><li>诸如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLMediaElement"><code>HTMLMediaElement</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebRTC_API">WebRTC</a> 等<a href="https://developer.mozilla.org/en-US/docs/Web/Media/Audio_and_video_delivery">影音类 API</a> 让你可以利用多媒体做一些非常有趣的事，比如在网页中直接播放音乐和影片，或用自己的网络摄像头获取录像，然后在其他人的电脑上展示（试用简易版<a href="http://chrisdavidmills.github.io/snapshot/">截图演示</a>以理解这个概念）。</li></ul><h2 id="JS添加方式"><a href="#JS添加方式" class="headerlink" title="JS添加方式"></a>JS添加方式</h2><p>内部JavaScript：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//javaScript代码</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>外部JavaScript</p><p>内联JavaScript</p><h2 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h2><h3 id="var"><a href="#var" class="headerlink" title="var"></a>var</h3><p>用 <code>var</code> 声明的变量的作用域是最靠近并包含 <code>var</code> 语句的以下花括号闭合语法结构的一个：</p><ul><li>函数主体</li><li>类<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Static_initialization_blocks">静态初始化块</a></li></ul><p>如果不是以上这些情况则是：</p><ul><li>当前<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Modules">模块</a>，如果代码以模块模式运行</li><li>全局作用域，如果代码以脚本模式运行</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> x = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">bar</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> y = <span class="hljs-number">2</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x); <span class="hljs-comment">// 1（`bar` 函数闭包中引用了 `x`）</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(y); <span class="hljs-comment">// 2（`y` 在作用域内）</span><br>  &#125;<br>  <span class="hljs-title function_">bar</span>();<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x); <span class="hljs-comment">// 1（`x` 在作用域内）</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(y); <span class="hljs-comment">// ReferenceError，`y` 的作用域限定在 `bar` 内</span><br>&#125;<br><br><span class="hljs-title function_">foo</span>();<br><br></code></pre></td></tr></table></figure><p>​其他块级结构，包括<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/block">块语句</a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/try...catch"><code>try...catch</code></a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/switch"><code>switch</code></a> 以及<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements#%E8%BF%AD%E4%BB%A3">其中一个 <code>for</code> 语句的头部</a>，对于 <code>var</code> 并不创建作用域，而在这样的块内部使用 <code>var</code> 声明的变量仍然可以在块外部被引用。</p><p>​var声明的变量全局不可变</p><h4 id="提升"><a href="#提升" class="headerlink" title="提升"></a>提升</h4><p>​var变量声明不论在脚本任何位置都会优先执行</p><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><p>let声明的变量不可以重新声明</p><h3 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h3><h4 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h4><p>整数</p><p>浮点数</p><p>双精度</p><h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><p>可以使用%{}来在字符串中嵌入变量</p><p>模版字面量 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">`<span class="hljs-subst">$&#123;a+b&#125;</span>`</span><br></code></pre></td></tr></table></figure><p>可以包含表达式，多行字符串</p><h4 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h4><h4 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h4><h4 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h4><h4 id="动态类型"><a href="#动态类型" class="headerlink" title="动态类型"></a>动态类型</h4><p>JavaScript变量类型为动态类型，如Python。</p><h2 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h2><h3 id="字符串长度"><a href="#字符串长度" class="headerlink" title="字符串长度"></a>字符串长度</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> browserType = <span class="hljs-string">&quot;mozilla&quot;</span>;<br>browserType.<span class="hljs-property">length</span>;<br></code></pre></td></tr></table></figure><h3 id="检索字符串"><a href="#检索字符串" class="headerlink" title="检索字符串"></a>检索字符串</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">browserType[<span class="hljs-number">0</span>];<br></code></pre></td></tr></table></figure><h3 id="查找子串"><a href="#查找子串" class="headerlink" title="查找子串"></a>查找子串</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">browserType.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;zilla&quot;</span>);<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">browserType.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;vanilla&quot;</span>);<br></code></pre></td></tr></table></figure><p>不存在返回-1</p><h3 id="截取子串"><a href="#截取子串" class="headerlink" title="截取子串"></a>截取子串</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">browserType.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><p>索引 i   0&lt;&#x3D;i&lt;3</p><p>第二个参数可选，默认返回字符串中剩余子串</p><h3 id="转化大小写"><a href="#转化大小写" class="headerlink" title="转化大小写"></a>转化大小写</h3><p>字符串方法<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase"><code>toLowerCase()</code></a>和<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase"><code>toUpperCase()</code></a>字符串并将所有字符分别转换为小写或大写。</p><h3 id="字符串替换"><a href="#字符串替换" class="headerlink" title="字符串替换"></a>字符串替换</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> myText = <span class="hljs-string">&quot;我是一个字符串&quot;</span>;<br><span class="hljs-keyword">const</span> newString = myText.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;字符串&quot;</span>, <span class="hljs-string">&quot;香肠&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h2><h3 id="数组长度"><a href="#数组长度" class="headerlink" title="数组长度"></a>数组长度</h3><p>同字符串</p><h3 id="数组索引"><a href="#数组索引" class="headerlink" title="数组索引"></a>数组索引</h3><p>同C++</p><h3 id="字符串与数组转化"><a href="#字符串与数组转化" class="headerlink" title="字符串与数组转化"></a>字符串与数组转化</h3><p>spring-&gt;Array</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> myArray = myData.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;,&quot;</span>);<br>myArray;<br></code></pre></td></tr></table></figure><p>Array-&gt;spring</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> myNewString = myArray.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;,&quot;</span>);<br>myNewString;<br><span class="hljs-comment">//或者toSring()方法，不过不能指定分隔符</span><br>myArray.<span class="hljs-title function_">toString</span>()<br></code></pre></td></tr></table></figure><h3 id="添加和删除"><a href="#添加和删除" class="headerlink" title="添加和删除"></a>添加和删除</h3><p>在数组末尾操作push()和pop()</p><p>对应与数组开头的操作unshift()和shift()</p><h2 id="代码语句"><a href="#代码语句" class="headerlink" title="代码语句"></a>代码语句</h2><h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (condition) &#123;<br><span class="hljs-comment">/* 条件为真时运行的代码 */</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">/* 否则，运行其他的代码 */</span><br>&#125;<br><br><br><span class="hljs-keyword">switch</span> (表达式) &#123;<br>  <span class="hljs-keyword">case</span> 选择<span class="hljs-number">1</span>:<br>    运行这段代码<br>    <span class="hljs-keyword">break</span>;<br><br>  <span class="hljs-keyword">case</span> 选择<span class="hljs-number">2</span>:<br>    否则，运行这段代码<br>    <span class="hljs-keyword">break</span>;<br><br>  <span class="hljs-comment">// 包含尽可能多的情况</span><br><br>  <span class="hljs-attr">default</span>:<br>    实际上，仅仅运行这段代码<br>&#125;<br><br><br><br>condition ? 运行这段代码 : 否则，运行这段代码<br></code></pre></td></tr></table></figure><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>  ctx.<span class="hljs-title function_">beginPath</span>();<br>  ctx.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&quot;rgba(255,0,0,0.5)&quot;</span>;<br>  ctx.<span class="hljs-title function_">arc</span>(<span class="hljs-title function_">random</span>(<span class="hljs-variable constant_">WIDTH</span>), <span class="hljs-title function_">random</span>(<span class="hljs-variable constant_">HEIGHT</span>), <span class="hljs-title function_">random</span>(<span class="hljs-number">50</span>), <span class="hljs-number">0</span>, <span class="hljs-number">2</span> * <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>);<br>  ctx.<span class="hljs-title function_">fill</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>while语句和do…while语句</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">functionName</span>(<span class="hljs-params"></span>) &#123;&#125;<br></code></pre></td></tr></table></figure><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>​事件是发生在你正在编程的系统中的事情——当事件发生时，系统产生（或“触发”）某种信号，并提供一种机制，当事件发生时，可以自动采取某种行动（即运行一些代码）。事件是在浏览器窗口内触发的，并倾向于附加到驻留在其中的特定项目。这可能是一个单一的元素，一组元素，当前标签中加载的 HTML 文档，或整个浏览器窗口。有许多不同类型的事件可以发生。</p><p>​为了对一个事件做出反应，你要给它附加一个<strong>事件处理器</strong>。这是一个代码块（通常是你作为程序员创建的一个 JavaScript 函数），在事件发生时运行。当这样一个代码块被定义为响应一个事件而运行时，我们说我们在<strong>注册一个事件处理器</strong>。注意，事件处理器有时候被叫做<strong>事件监听器</strong>——从我们的用意来看这两个名字是相同的，尽管严格地来说这块代码既监听也处理事件。监听器留意事件是否发生，处理器对事件发生做出回应。</p><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>​对象是一个包含相关数据和方法的集合（通常由一些变量和函数组成，我们称之为对象里面的属性和方法），让我们通过一个例子来了解它们。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> person = &#123;<br>  <span class="hljs-attr">name</span>: [<span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-string">&quot;Smith&quot;</span>],<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">32</span>,<br>  <span class="hljs-attr">bio</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name[<span class="hljs-number">0</span>]&#125;</span> <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name[<span class="hljs-number">1</span>]&#125;</span> 现在 <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.age&#125;</span> 岁了。`</span>);<br>  &#125;,<br>  <span class="hljs-attr">introduceSelf</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`你好！我是 <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name[<span class="hljs-number">0</span>]&#125;</span>。`</span>);<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>bio: function ()可写为bio()</p><h3 id="访问对象属性"><a href="#访问对象属性" class="headerlink" title="访问对象属性"></a>访问对象属性</h3><h4 id="点表示法"><a href="#点表示法" class="headerlink" title="点表示法"></a>点表示法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">person.<span class="hljs-property">age</span>;<br>person.<span class="hljs-property">name</span>.<span class="hljs-property">first</span>;<br></code></pre></td></tr></table></figure><h4 id="括号表示法"><a href="#括号表示法" class="headerlink" title="括号表示法"></a>括号表示法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">person[<span class="hljs-string">&quot;age&quot;</span>];<br>person[<span class="hljs-string">&quot;name&quot;</span>][<span class="hljs-string">&quot;first&quot;</span>];<br></code></pre></td></tr></table></figure><p>括号表示法还可以动态的添加属性。</p><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>按照惯例，构造函数以大写字母开头，并且以它们创建的对象类型命名。构造函数只是使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/new"><code>new</code></a> 关键字调用的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">introduceSelf</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`你好！我是 <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>。`</span>);<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>要将 <code>Person()</code> 作为构造函数调用，我们使用 <code>new</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> salva = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;Salva&quot;</span>);<br>salva.<span class="hljs-property">name</span>;<br>salva.<span class="hljs-title function_">introduceSelf</span>();<br><span class="hljs-comment">// &quot;你好！我是 Salva。&quot;</span><br><br><span class="hljs-keyword">const</span> frankie = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;Frankie&quot;</span>);<br>frankie.<span class="hljs-property">name</span>;<br>frankie.<span class="hljs-title function_">introduceSelf</span>();<br><span class="hljs-comment">// &quot;你好！我是 Frankie。&quot;</span><br></code></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><hr><p><a href="https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript">JavaScript - 学习 Web 开发 | MDN</a></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>类比推理</title>
    <link href="/posts/32813/"/>
    <url>/posts/32813/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>图像推理</title>
    <link href="/posts/62451/"/>
    <url>/posts/62451/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>论证推理</title>
    <link href="/posts/9220/"/>
    <url>/posts/9220/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>朴素推理</title>
    <link href="/posts/62280/"/>
    <url>/posts/62280/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>命题推理</title>
    <link href="/posts/61907/"/>
    <url>/posts/61907/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>测试文件</title>
    <link href="/posts/7775/"/>
    <url>/posts/7775/</url>
    
    <content type="html"><![CDATA[<h1 id="这是一篇测试文章"><a href="#这是一篇测试文章" class="headerlink" title="这是一篇测试文章"></a>这是一篇测试文章</h1><img src="/posts/7775/1.JPG" class="" title="图片引用方法一"><img src="/posts/7775/yanusi-1714706766919-2.png" class="" title="yanusi">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/posts/16107/"/>
    <url>/posts/16107/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
